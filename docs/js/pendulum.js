// Generated by purs bundle 0.13.6
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];              
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  exports["cons"] = $foreign.cons;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["applicativeEffect"] = applicativeEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.runEffectFn3 = function runEffectFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["runEffectFn3"] = $foreign.runEffectFn3;
})(PS);
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.removeChildren = function(target) {
    return function() {
      var el = document.getElementById(target);

      // http://stackoverflow.com/a/3955238/704831
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  // This function maintains a global state `window.flareID` to generate unique
  // DOM element IDs. It is only called from functions with a DOM effect.
  function getUniqueID() {
    if (window.flareID === undefined) {
      window.flareID = 0;
    }
    window.flareID = window.flareID + 1;
    return "flare-component-" + window.flareID.toString();
  }

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(label) {
      return function(initial) {
        return function(send) {
          return function() {
            var uid = getUniqueID();
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;
            el.id = uid;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (label !== "") {
              var labelEl = document.createElement("label");
              labelEl.htmlFor = uid;
              labelEl.appendChild(document.createTextNode(label));
              div.appendChild(labelEl);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  } 

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  }

  exports.cNumberRange = function(type) {
    return function(min) {
      return function(max) {
        return function(step) {
          return createComponent("number-" + type,
            function(initial) {
              var input = document.createElement("input");
              input.type = type;
              input.min = min.toString();
              input.max = max.toString();
              input.step = step.toString();
              input.value = initial.toString();
              return input;
            },
            "input",
            function(t, initial) {
              return clamp(min, max, initial, parseFloat(t.value));
            }
          );
        };
      };
    };
  };

  function padNumber(num) {
    var str = num.toString();
    if (str.length == 1) {
      str = "0" + str;
    }
    return str;
  }
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Signal"] = $PS["Signal"] || {};
  var exports = $PS["Signal"];
  var $foreign = $PS["Signal"];
  var Data_Functor = $PS["Data.Functor"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  exports["functorSignal"] = functorSignal;
  exports["constant"] = $foreign.constant;
  exports["runSignal"] = $foreign.runSignal;
})(PS);
(function(exports) {
  // module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Signal.Channel"] = $PS["Signal.Channel"] || {};
  var exports = $PS["Signal.Channel"];
  var $foreign = $PS["Signal.Channel"];
  var Signal = $PS["Signal"];                
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["channel"] = channel;
  exports["send"] = send;
  exports["subscribe"] = $foreign.subscribe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Flare"] = $PS["Flare"] || {};
  var exports = $PS["Flare"];
  var $foreign = $PS["Flare"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Signal = $PS["Signal"];
  var Signal_Channel = $PS["Signal.Channel"];                
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var flareWith = function (controls) {
      return function (handler) {
          return function (v) {
              return function __do() {
                  var v1 = v();
                  $foreign.removeChildren(controls)();
                  Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)($foreign.appendComponent(controls))(v1.value0)();
                  return handler(v1.value1)();
              };
          };
      };
  };
  var runFlareWith = function (controls) {
      return function (handler) {
          return function (ui) {
              return flareWith(controls)((function () {
                  var $112 = Data_Functor.map(Signal.functorSignal)(handler);
                  return function ($113) {
                      return Signal.runSignal($112($113));
                  };
              })())(ui);
          };
      };
  };
  var createUI = function (createComp) {
      return function (label) {
          return function ($$default) {
              return UI(function __do() {
                  var chan = Signal_Channel.channel($$default)();
                  var comp = createComp(label)($$default)(Signal_Channel.send(chan))();
                  var signal = Signal_Channel.subscribe(chan);
                  return new Flare([ comp ], signal);
              });
          };
      };
  };                                 
  var numberSlider = function (label) {
      return function (min) {
          return function (max) {
              return function (step) {
                  return function ($$default) {
                      return createUI($foreign.cNumberRange("range")(min)(max)(step))(label)($$default);
                  };
              };
          };
      };
  };
  exports["numberSlider"] = numberSlider;
  exports["runFlareWith"] = runFlareWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Hamilton"] = $PS["Hamilton"] || {};
  var exports = $PS["Hamilton"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var wait = function (dt) {
      return function (state) {
          return {
              time: state.time + dt,
              position: state.position,
              momentum: state.momentum
          };
      };
  };
  var scalarFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var scalarApply = new Control_Apply.Apply(function () {
      return scalarFunctor;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var scalarApplicative = new Control_Applicative.Applicative(function () {
      return scalarApply;
  }, function (a) {
      return a;
  });
  var kick = function (dictApplicative) {
      return function (dt) {
          return function (system) {
              return function (state) {
                  return {
                      time: state.time,
                      position: state.position,
                      momentum: Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (p) {
                          return function (dp) {
                              return p + dt * dp;
                          };
                      })(state.momentum))(system.momentumEquation(state))
                  };
              };
          };
      };
  };
  var integrateSystem = function (solve) {
      return function (halt) {
          return function (f) {
              return function (ic) {
                  var next = solve(f)(ic);
                  var $13 = halt(ic)(next);
                  if ($13) {
                      return Data_Array.cons(ic)([ next ]);
                  };
                  return Data_Array.cons(ic)(integrateSystem(solve)(halt)(f)(next));
              };
          };
      };
  };
  var haltAtTime = function (t) {
      return function (s1) {
          return function (s2) {
              return s2.time >= t;
          };
      };
  };
  var drift = function (dictApplicative) {
      return function (dt) {
          return function (system) {
              return function (state) {
                  return {
                      time: state.time,
                      position: Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (q) {
                          return function (dq) {
                              return q + dt * dq;
                          };
                      })(state.position))(system.positionEquation(state)),
                      momentum: state.momentum
                  };
              };
          };
      };
  };
  var leapFrog = function (dictApplicative) {
      return function (dt) {
          return function (s) {
              var $14 = wait(dt / 2.0);
              var $15 = drift(dictApplicative)(dt)(s);
              var $16 = wait(dt / 2.0);
              var $17 = kick(dictApplicative)(dt)(s);
              return function ($18) {
                  return $14($15($16($17($18))));
              };
          };
      };
  };
  exports["leapFrog"] = leapFrog;
  exports["haltAtTime"] = haltAtTime;
  exports["integrateSystem"] = integrateSystem;
  exports["scalarFunctor"] = scalarFunctor;
  exports["scalarApplicative"] = scalarApplicative;
})(PS);
(function(exports) {
  "use strict";

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };                         

  exports.sin = Math.sin;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["pow"] = $foreign.pow;
  exports["sin"] = $foreign.sin;
})(PS);
(function(exports) {
  "use strict";

  /* var Plotly = require("../node_modules/plotly.js-dist/plotly.js"); */

  exports.lineChartUnc = function(domId, data, layout) {
          return Plotly.newPlot(domId, data, layout);
  };

  exports.restyleUnc = function(domId, key, value) {
          return Plotly.restyle(domId, key, value);
  };
})(PS["Plotting"] = PS["Plotting"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Plotting"] = $PS["Plotting"] || {};
  var exports = $PS["Plotting"];
  var $foreign = $PS["Plotting"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];                
  var restyle = Effect_Uncurried.runEffectFn3($foreign.restyleUnc);
  var lineChart = Effect_Uncurried.runEffectFn3($foreign.lineChartUnc);
  exports["lineChart"] = lineChart;
  exports["restyle"] = restyle;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pendulum"] = $PS["Pendulum"] || {};
  var exports = $PS["Pendulum"];
  var Data_Functor = $PS["Data.Functor"];
  var Flare = $PS["Flare"];
  var Hamilton = $PS["Hamilton"];
  var $$Math = $PS["Math"];
  var Plotting = $PS["Plotting"];                
  var simplePendulum = function (g) {
      return function (l) {
          return {
              positionEquation: function (s) {
                  return Data_Functor.map(Hamilton.scalarFunctor)(function (p) {
                      return p / $$Math.pow(l)(2.0);
                  })(s.momentum);
              },
              momentumEquation: function (s) {
                  return Data_Functor.map(Hamilton.scalarFunctor)(function (q) {
                      return -g * l * $$Math.sin(q);
                  })(s.position);
              }
          };
      };
  };
  var initModel = {
      initAngle: 3.0,
      dt: 0.1,
      tEnd: 10.0,
      length: 1.0
  };
  var updatePlot = function (iq) {
      var m = {
          initAngle: iq,
          dt: initModel.dt,
          length: initModel.length,
          tEnd: initModel.tEnd
      };
      var result = Hamilton.integrateSystem(Hamilton.leapFrog(Hamilton.scalarApplicative)(m.dt))(Hamilton.haltAtTime(m.tEnd))(simplePendulum(9.81)(m.length))({
          time: 0.0,
          position: m.initAngle,
          momentum: 0.0
      });
      return Plotting.restyle("pendulum-plot")("y")([ Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return v.position;
      })(result) ]);
  };
  var convertResult = function (rs) {
      return {
          x: Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return v.time;
          })(rs),
          y: Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return v.position;
          })(rs),
          mode: "lines+markers"
      };
  };
  var main = (function () {
      var slider = Flare.numberSlider("initial angle")(0.0)(3.14)(1.0e-2)(1.57);
      var result = Hamilton.integrateSystem(Hamilton.leapFrog(Hamilton.scalarApplicative)(0.1))(Hamilton.haltAtTime(10.0))(simplePendulum(9.81)(1.0))({
          time: 0.0,
          position: 3.0,
          momentum: 0.0
      });
      return function __do() {
          Plotting.lineChart("pendulum-plot")([ convertResult(result) ])({
              title: "pendulum"
          })();
          return Flare.runFlareWith("pendulum-control")(updatePlot)(slider)();
      };
  })();
  exports["simplePendulum"] = simplePendulum;
  exports["updatePlot"] = updatePlot;
  exports["initModel"] = initModel;
  exports["convertResult"] = convertResult;
  exports["main"] = main;
})(PS);
PS["Pendulum"].main();