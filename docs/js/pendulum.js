// Generated by purs bundle 0.13.6
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  exports["Applicative"] = Applicative;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  exports["cons"] = $foreign.cons;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];              
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS);
(function(exports) {
  "use strict";

  exports.runEffectFn3 = function runEffectFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["runEffectFn3"] = $foreign.runEffectFn3;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Hamilton"] = $PS["Hamilton"] || {};
  var exports = $PS["Hamilton"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var wait = function (dt) {
      return function (state) {
          return {
              time: state.time + dt,
              position: state.position,
              momentum: state.momentum
          };
      };
  };
  var scalarFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var scalarApply = new Control_Apply.Apply(function () {
      return scalarFunctor;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var scalarApplicative = new Control_Applicative.Applicative(function () {
      return scalarApply;
  }, function (a) {
      return a;
  });
  var kick = function (dictApplicative) {
      return function (dt) {
          return function (system) {
              return function (state) {
                  return {
                      time: state.time,
                      position: state.position,
                      momentum: Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (p) {
                          return function (dp) {
                              return p + dt * dp;
                          };
                      })(state.momentum))(system.momentumEquation(state))
                  };
              };
          };
      };
  };
  var integrateSystem = function (solve) {
      return function (halt) {
          return function (f) {
              return function (ic) {
                  var next = solve(f)(ic);
                  var $13 = halt(ic)(next);
                  if ($13) {
                      return Data_Array.cons(ic)([ next ]);
                  };
                  return Data_Array.cons(ic)(integrateSystem(solve)(halt)(f)(next));
              };
          };
      };
  };
  var haltAtTime = function (t) {
      return function (s1) {
          return function (s2) {
              return s2.time >= t;
          };
      };
  };
  var drift = function (dictApplicative) {
      return function (dt) {
          return function (system) {
              return function (state) {
                  return {
                      time: state.time,
                      position: Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (q) {
                          return function (dq) {
                              return q + dt * dq;
                          };
                      })(state.position))(system.positionEquation(state)),
                      momentum: state.momentum
                  };
              };
          };
      };
  };
  var leapFrog = function (dictApplicative) {
      return function (dt) {
          return function (s) {
              var $14 = wait(dt / 2.0);
              var $15 = drift(dictApplicative)(dt)(s);
              var $16 = wait(dt / 2.0);
              var $17 = kick(dictApplicative)(dt)(s);
              return function ($18) {
                  return $14($15($16($17($18))));
              };
          };
      };
  };
  exports["leapFrog"] = leapFrog;
  exports["haltAtTime"] = haltAtTime;
  exports["integrateSystem"] = integrateSystem;
  exports["scalarFunctor"] = scalarFunctor;
  exports["scalarApplicative"] = scalarApplicative;
})(PS);
(function(exports) {
  "use strict";

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };                         

  exports.sin = Math.sin;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["pow"] = $foreign.pow;
  exports["sin"] = $foreign.sin;
})(PS);
(function(exports) {
  "use strict";

  /* var Plotly = require("../node_modules/plotly.js-dist/plotly.js"); */

  exports.lineChartUnc = function(domId, data, layout) {
          return Plotly.newPlot(domId, data, layout);
  };
})(PS["Plotting"] = PS["Plotting"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Plotting"] = $PS["Plotting"] || {};
  var exports = $PS["Plotting"];
  var $foreign = $PS["Plotting"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];                
  var lineChart = Effect_Uncurried.runEffectFn3($foreign.lineChartUnc);
  exports["lineChart"] = lineChart;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pendulum"] = $PS["Pendulum"] || {};
  var exports = $PS["Pendulum"];
  var Data_Functor = $PS["Data.Functor"];
  var Hamilton = $PS["Hamilton"];
  var $$Math = $PS["Math"];
  var Plotting = $PS["Plotting"];                
  var simplePendulum = function (g) {
      return function (l) {
          return {
              positionEquation: function (s) {
                  return Data_Functor.map(Hamilton.scalarFunctor)(function (p) {
                      return p / $$Math.pow(l)(2.0);
                  })(s.momentum);
              },
              momentumEquation: function (s) {
                  return Data_Functor.map(Hamilton.scalarFunctor)(function (q) {
                      return -g * l * $$Math.sin(q);
                  })(s.position);
              }
          };
      };
  };
  var convertResult = function (rs) {
      return {
          x: Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return v.time;
          })(rs),
          y: Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return v.position;
          })(rs),
          mode: "lines+markers"
      };
  };
  var main = (function () {
      var result = Hamilton.integrateSystem(Hamilton.leapFrog(Hamilton.scalarApplicative)(0.1))(Hamilton.haltAtTime(10.0))(simplePendulum(9.81)(1.0))({
          time: 0.0,
          position: 3.0,
          momentum: 0.0
      });
      return Plotting.lineChart("pendulum")([ convertResult(result) ])({
          title: "pendulum"
      });
  })();
  exports["simplePendulum"] = simplePendulum;
  exports["convertResult"] = convertResult;
  exports["main"] = main;
})(PS);
PS["Pendulum"].main();